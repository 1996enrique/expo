{"version":3,"file":"withRestoration.js","sourceRoot":"","sources":["../../src/launch/withRestoration.tsx"],"names":[],"mappings":"AAAA,OAAO,SAAS,EAAE,EAAE,oBAAoB,EAAE,MAAM,gBAAgB,CAAC;AACjE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,cAAc,CAAC;AAExC,OAAO,cAAc,MAAM,+BAA+B,CAAC;AAc3D,MAAM,oBAAoB,GACxB,CAAC,OAAO;IACR,QAAQ,CAAC,EAAE,KAAK,SAAS;IACzB,CAAC,QAAQ,CAAC,EAAE,KAAK,KAAK,IAAI,SAAS,CAAC,oBAAoB,KAAK,oBAAoB,CAAC,IAAI,CAAC,CAAC;AAE1F,qFAAqF;AACrF,iFAAiF;AACjF,IAAI,eAAe,GAA2B,GAAG,EAAE,GAAE,CAAC,CAAC;AAEvD,IAAI,OAAO,IAAI,QAAQ,CAAC,EAAE,KAAK,KAAK,EAAE;IACpC,IAAI;QACF,oCAAoC;QACpC,MAAM,EAAE,YAAY,EAAE,gBAAgB,EAAE,GAAG,OAAO,CAAC,iBAAiB,CAAC,CAAC;QACtE,eAAe,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,gBAAgB,EAAE,EAAE,0BAA0B,EAAE,IAAI,EAAE,CAAC,CAAC;KAC9F;IAAC,MAAM,GAAE;CACX;AAED,MAAM,oBAAoB,GAAG,CAAyB,KAAQ,EAAK,EAAE;IACnE,IAAI;QACF,wCAAwC;QACxC,MAAM,EAAE,cAAc,EAAE,GAAG,OAAO,CAAC,qBAAqB,CAAC,CAAC;QAC1D,OAAO;YACL,GAAG,KAAK;YACR,GAAG,EAAE,EAAE,GAAG,KAAK,CAAC,GAAG,EAAE,aAAa,EAAE,cAAc,EAAE;SACrD,CAAC;KACH;IAAC,MAAM,GAAE;IAEV,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,OAAO,UAAU,eAAe,CACrC,gBAAwC;IAExC,SAAS,eAAe,CAAC,KAAQ;QAC/B,eAAe,EAAE,CAAC;QAElB,MAAM,aAAa,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;QAElD,IAAI,CAAC,oBAAoB,EAAE;YACzB,OAAO,oBAAC,gBAAgB,OAAK,aAAa,GAAI,CAAC;SAChD;QAED,yCAAyC;QACzC,OAAO,CACL;YACE,oBAAC,gBAAgB,OAAK,aAAa,GAAI;YACvC,oBAAC,cAAc,OAAG,CACjB,CACJ,CAAC;IACJ,CAAC;IAED,IAAI,OAAO,EAAE;QACX,MAAM,IAAI,GAAG,gBAAgB,CAAC,WAAW,IAAI,gBAAgB,CAAC,IAAI,IAAI,WAAW,CAAC;QAClF,eAAe,CAAC,WAAW,GAAG,mBAAmB,IAAI,GAAG,CAAC;KAC1D;IAED,OAAO,eAAe,CAAC;AACzB,CAAC","sourcesContent":["import Constants, { ExecutionEnvironment } from 'expo-constants';\nimport * as React from 'react';\nimport { Platform } from 'react-native';\n\nimport DevLoadingView from '../environment/DevLoadingView';\n\nexport type InitialProps = {\n  exp: {\n    notification?: any;\n    errorRecovery?: any;\n    manifestString?: string;\n    [key: string]: any;\n  };\n  shell?: boolean;\n  shellManifestUrl?: string;\n  [key: string]: any;\n};\n\nconst isDevLoadingDisabled =\n  !__DEV__ ||\n  Platform.OS === 'android' ||\n  (Platform.OS === 'ios' && Constants.executionEnvironment === ExecutionEnvironment.Bare);\n\n// This hook can be optionally imported because __DEV__ never changes during runtime.\n// Using __DEV__ like this enables tree shaking to remove the hook in production.\nlet useDevKeepAwake: (tag?: string) => void = () => {};\n\nif (__DEV__ && Platform.OS !== 'web') {\n  try {\n    // Optionally import expo-keep-awake\n    const { useKeepAwake, ExpoKeepAwakeTag } = require('expo-keep-awake');\n    useDevKeepAwake = () => useKeepAwake(ExpoKeepAwakeTag, { suppressDeactivateWarnings: true });\n  } catch {}\n}\n\nconst attachRecoveredProps = <P extends InitialProps>(props: P): P => {\n  try {\n    // Optionally import expo-error-recovery\n    const { recoveredProps } = require('expo-error-recovery');\n    return {\n      ...props,\n      exp: { ...props.exp, errorRecovery: recoveredProps },\n    };\n  } catch {}\n\n  return props;\n};\n\nexport default function withRestoration<P extends InitialProps>(\n  AppRootComponent: React.ComponentType<P>\n): React.ComponentType<P> {\n  function WithRestoration(props: P) {\n    useDevKeepAwake();\n\n    const combinedProps = attachRecoveredProps(props);\n\n    if (!isDevLoadingDisabled) {\n      return <AppRootComponent {...combinedProps} />;\n    }\n\n    // dev-mode only for managed iOS and web.\n    return (\n      <>\n        <AppRootComponent {...combinedProps} />\n        <DevLoadingView />\n      </>\n    );\n  }\n\n  if (__DEV__) {\n    const name = AppRootComponent.displayName || AppRootComponent.name || 'Anonymous';\n    WithRestoration.displayName = `withRestoration(${name})`;\n  }\n\n  return WithRestoration;\n}\n"]}