{"version":3,"file":"ExpoKeepAwake.web.js","sourceRoot":"","sources":["../src/ExpoKeepAwake.web.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAgB,MAAM,mBAAmB,CAAC;AAEvE,OAAO,EAAkB,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AAExE,MAAM,WAAW,GAAwB,EAAE,CAAC;AAE5C,sGAAsG;AACtG,eAAe;IACb,KAAK,CAAC,gBAAgB;QACpB,IAAI,QAAQ,CAAC,cAAc,EAAE;YAC3B,OAAO,UAAU,IAAI,SAAS,CAAC;SAChC;QACD,OAAO,KAAK,CAAC;IACf,CAAC;IACD,KAAK,CAAC,QAAQ,CAAC,GAAW;QACxB,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YAC5B,OAAO;SACR;QACD,MAAM,QAAQ,GAAG,MAAO,SAAiB,CAAC,QAAQ,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QACrE,WAAW,CAAC,GAAG,CAAC,GAAG,QAAQ,CAAC;IAC9B,CAAC;IACD,KAAK,CAAC,UAAU,CAAC,GAAW;QAC1B,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YAC5B,OAAO;SACR;QACD,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YACpB,WAAW,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC;YAC3B,WAAW,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACzB;aAAM;YACL,MAAM,IAAI,UAAU,CAClB,4BAA4B,EAC5B,0BAA0B,GAAG,wBAAwB,CACtD,CAAC;SACH;IACH,CAAC;IACD,WAAW,CAAC,GAAW,EAAE,QAAyC;QAChE,MAAM,aAAa,GAAG,GAAG,EAAE;YACzB,QAAQ,CAAC,EAAE,KAAK,EAAE,mBAAmB,CAAC,OAAO,EAAE,CAAC,CAAC;QACnD,CAAC,CAAC;QACF,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;YACpB,WAAW,CAAC,GAAG,CAAC,CAAC,gBAAgB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;SAC7D;QACD,OAAO;YACL,MAAM,EAAE,GAAG,EAAE;gBACX,IAAI,WAAW,CAAC,GAAG,CAAC,EAAE;oBACpB,WAAW,CAAC,GAAG,CAAC,CAAC,mBAAmB,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC;iBAChE;YACH,CAAC;SACF,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import { CodedError, Platform, Subscription } from 'expo-modules-core';\n\nimport { KeepAwakeEvent, KeepAwakeEventState } from './KeepAwake.types';\n\nconst wakeLockMap: Record<string, any> = {};\n\n/** Wraps the webWakeLock API https://developer.mozilla.org/en-US/docs/Web/API/Screen_Wake_Lock_API */\nexport default {\n  async isAvailableAsync() {\n    if (Platform.isDOMAvailable) {\n      return 'wakeLock' in navigator;\n    }\n    return false;\n  },\n  async activate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    const wakeLock = await (navigator as any).wakeLock.request('screen');\n    wakeLockMap[tag] = wakeLock;\n  },\n  async deactivate(tag: string) {\n    if (!Platform.isDOMAvailable) {\n      return;\n    }\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].release();\n      wakeLockMap[tag] = null;\n    } else {\n      throw new CodedError(\n        'ERR_KEEP_AWAKE_TAG_INVALID',\n        `The wake lock with tag ${tag} has not activated yet`\n      );\n    }\n  },\n  addListener(tag: string, listener: (event: KeepAwakeEvent) => void): Subscription {\n    const eventListener = () => {\n      listener({ state: KeepAwakeEventState.RELEASE });\n    };\n    if (wakeLockMap[tag]) {\n      wakeLockMap[tag].addEventListener('release', eventListener);\n    }\n    return {\n      remove: () => {\n        if (wakeLockMap[tag]) {\n          wakeLockMap[tag].removeEventListener('release', eventListener);\n        }\n      },\n    };\n  },\n};\n"]}